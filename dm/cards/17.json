[
  {
    "q": "What are the main issues with the k-means algorithm?",
    "a": "- Sensitive to initial random choice of centers\n- Can get stuck in local minima\n- Outliers strongly affect mean values and clusters\n- Cluster centers are not real data points\n- Uses Euclidean distance, which is unsuitable for categorical features"
  },
  {
    "q": "What is the goal of the k-Medoids algorithm?",
    "a": "- To find \\( k \\) representative points (medoids) from the dataset\n- Minimize the total distance from each point to its nearest medoid:\n\\[\n\\sum\\limits_{i=1}^{n} \\min_j d(X_i, Y_j)\n\\]\n- Where:\n  - \\( X_i \\) is a data point\n  - \\( Y_j \\) is a medoid\n  - \\( d(\\cdot, \\cdot) \\) is any dissimilarity function"
  },
  {
    "q": "How does the k-Medoids algorithm work?",
    "a": "- **Initialization**: Randomly choose \\( k \\) data points as medoids\n- **Assignment**: Assign each data point to its closest medoid\n- **Optimization (hill-climbing)**:\n  - Try swapping each medoid with a non-medoid\n  - Accept the swap if it reduces the total cost\n  - Repeat assignment and optimization until no improvement"
  },
  {
    "q": "What is hill-climbing in the context of k-Medoids?",
    "a": "- Start with a random solution (initial medoids)\n- Make incremental changes (swap medoid with non-medoid)\n- Accept changes that improve the clustering\n- Stop when no better solution is found"
  },
  {
    "q": "What are the pros of the k-Medoids algorithm?",
    "a": "- Medoids are actual data points → easy to interpret\n- More robust to noise and outliers than k-means\n- Can use any dissimilarity measure\n- Works well with categorical, mixed, or time-series data"
  },
  {
    "q": "What are the cons of the k-Medoids algorithm?",
    "a": "- Sensitive to initial choice of medoids\n- Can get stuck in local minima\n- Slower than k-means due to complex optimization\n- Requires multiple runs for better results"
  },
  {
    "q": "What is the time complexity issue in k-Medoids?",
    "a": "- For each optimization step, need to compute:\n\\[ k \\cdot n \\text{ distance calculations} \\]\n- This becomes expensive for large \\( n \\) and \\( k \\)"
  },
  {
    "q": "How can we reduce the time complexity in k-Medoids?",
    "a": "- Randomly sample \\( r \\) pairs \\( (X, Y) \\), where:\n  - \\( X \\in \\mathcal{D} \\), \\( Y \\in \\{Y_1, \\ldots, Y_k\\} \\)\n- Evaluate only those swaps\n- Choose the best among them → fewer computations"
  }
]
